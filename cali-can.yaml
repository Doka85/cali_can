esphome:
  name: gc-can
  friendly_name: GC-Can

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: "YOURKEY"

ota:
  - platform: esphome
    password: "YOURPASSWORD"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "Cali-Can Fallback Hotspot"
    password: "YOURPASSWORD"

captive_portal:

globals:
  - id: last_frame_70eb
    type: std::vector<uint8_t>
    initial_value: 'std::vector<uint8_t>()'

canbus:
  - platform: esp32_can
    tx_pin: GPIO5
    rx_pin: GPIO4
    can_id: 1
    bit_rate: 500kbps

    on_frame:
      - can_id: 0x18EF73EB
        use_extended_id: true
        then:
          - lambda: |-
              if (x.size() >= 7) {
                float fresh = static_cast<float>(x[4]);
                float grey = static_cast<float>(x[6]);
                id(fresh_water_level).publish_state(fresh);
                id(grey_water_level).publish_state(grey);
              } else {
                ESP_LOGW("can_sniffer", "Unvollständiges Paket empfangen: %u Bytes", x.size());
              }

      - can_id: 0x18EF70EB
        use_extended_id: true
        then:
          - lambda: |-
              if (x.size() >= 2) {
                bool locked = (x[1] == 0x04);
                id(door_locked).publish_state(locked);
              } else {
                ESP_LOGW("can_sniffer", "Unvollständiges Paket empfangen: %u Bytes", x.size());
              }
          - lambda: |-
              if (x != id(last_frame_70eb)) {
                id(last_frame_70eb) = x;
                ESP_LOGI("can_sniffer", "ÄNDERUNG 0x70EB: %s", format_hex_pretty(x).c_str());
              }

      - can_id: 0x18EF70C9
        use_extended_id: true
        then:
          - lambda: |-
              if (x.size() >= 2) {
                if (x[0] == 0x00) {
                  if (x[1] == 0x41) {
                    id(external_light_status).publish_state(true);
                  } else {
                    id(external_light_status).publish_state(false);
                  }
                } else if (x[0] == 0x01) {
                  if (x[1] == 0x41) {
                    id(internal_light_status).publish_state(true);
                  } else {
                    id(internal_light_status).publish_state(false);
                  }
                }
              }

      - use_extended_id: true
        can_id: 0x00000000
        then:
          - lambda: |-
              ESP_LOGI("can_sniffer", "Received CAN frame with %u bytes: %s", x.size(), format_hex_pretty(x).c_str());

sensor:
  - platform: template
    name: "Frischwasserstand"
    id: fresh_water_level
    unit_of_measurement: "%"
    accuracy_decimals: 0
    state_class: measurement

  - platform: template
    name: "Grauwasserstand"
    id: grey_water_level
    unit_of_measurement: "%"
    accuracy_decimals: 0
    state_class: measurement

binary_sensor:
  - platform: template
    name: "Tür Verriegelt"
    id: door_locked
    device_class: lock

  - platform: template
    name: "Innenbeleuchtung aktiv"
    id: internal_light_status
    device_class: light

  - platform: template
    name: "Außenbeleuchtung aktiv"
    id: external_light_status
    device_class: light

button:
  - platform: template
    name: "Innenbeleuchtung"
    on_press:
      - canbus.send:
          can_id: 0x18EF70C9
          use_extended_id: true
          data: [0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
      - delay: 100ms
      - canbus.send:
          can_id: 0x18EF70C9
          use_extended_id: true
          data: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

  - platform: template
    name: "Trittstufe AUSFAHREN"
    on_press:
      - canbus.send:
          can_id: 0x18EF71C9
          use_extended_id: true
          data: [0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
      - delay: 100ms
      - canbus.send:
          can_id: 0x18EF71C9
          use_extended_id: true
          data: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

  - platform: template
    name: "Trittstufe EINFAHREN"
    on_press:
      - canbus.send:
          can_id: 0x18EF71C9
          use_extended_id: true
          data: [0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
      - delay: 100ms
      - canbus.send:
          can_id: 0x18EF71C9
          use_extended_id: true
          data: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

  - platform: template
    name: "Trittstufe AUTO-MODUS TOGGLE"
    on_press:
      - canbus.send:
          can_id: 0x18EF71C9
          use_extended_id: true
          data: [0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
      - delay: 100ms
      - canbus.send:
          can_id: 0x18EF71C9
          use_extended_id: true
          data: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

  - platform: template
    name: "Camping Mode TOGGLE"
    on_press:
      - canbus.send:
          can_id: 0x18EF71C9
          use_extended_id: true
          data: [0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
      - delay: 100ms
      - canbus.send:
          can_id: 0x18EF71C9
          use_extended_id: true
          data: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

  - platform: template
    name: "Außenbeleuchtung"
    on_press:
      - canbus.send:
          can_id: 0x18EF70C9
          use_extended_id: true
          data: [0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
      - delay: 100ms
      - canbus.send:
          can_id: 0x18EF70C9
          use_extended_id: true
          data: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
